// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "hamessage.proto"
// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct HamessageRoot {
  public static let `default` = HamessageRoot()
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(registry: extensionRegistry)
  }
  public func registerAllExtensions(registry: ExtensionRegistry) {
  }
}

final public class Hamessage : GeneratedMessage {

  public static func == (lhs: Hamessage, rhs: Hamessage) -> Bool {
    if (lhs === rhs) {
      return true
    }
    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
    fieldCheck = fieldCheck && (lhs.hasEvent == rhs.hasEvent) && (!lhs.hasEvent || lhs.event == rhs.event)
    fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
    fieldCheck = fieldCheck && (lhs.hasProfileimage == rhs.hasProfileimage) && (!lhs.hasProfileimage || lhs.profileimage == rhs.profileimage)
    fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
    fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
    fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    return fieldCheck
  }

  public fileprivate(set) var event:String = ""
  public fileprivate(set) var hasEvent:Bool = false

  public fileprivate(set) var name:String = ""
  public fileprivate(set) var hasName:Bool = false

  public fileprivate(set) var profileimage:String = ""
  public fileprivate(set) var hasProfileimage:Bool = false

  public fileprivate(set) var text:String = ""
  public fileprivate(set) var hasText:Bool = false

  public fileprivate(set) var email:String = ""
  public fileprivate(set) var hasEmail:Bool = false

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeTo(codedOutputStream: CodedOutputStream) throws {
    if hasEvent {
      try codedOutputStream.writeString(fieldNumber: 1, value:event)
    }
    if hasName {
      try codedOutputStream.writeString(fieldNumber: 2, value:name)
    }
    if hasProfileimage {
      try codedOutputStream.writeString(fieldNumber: 3, value:profileimage)
    }
    if hasText {
      try codedOutputStream.writeString(fieldNumber: 4, value:text)
    }
    if hasEmail {
      try codedOutputStream.writeString(fieldNumber: 5, value:email)
    }
    try unknownFields.writeTo(codedOutputStream: codedOutputStream)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasEvent {
      serialize_size += event.computeStringSize(fieldNumber: 1)
    }
    if hasName {
      serialize_size += name.computeStringSize(fieldNumber: 2)
    }
    if hasProfileimage {
      serialize_size += profileimage.computeStringSize(fieldNumber: 3)
    }
    if hasText {
      serialize_size += text.computeStringSize(fieldNumber: 4)
    }
    if hasEmail {
      serialize_size += email.computeStringSize(fieldNumber: 5)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func getBuilder() -> Hamessage.Builder {
    return Hamessage.classBuilder() as! Hamessage.Builder
  }
  public func getBuilder() -> Hamessage.Builder {
    return classBuilder() as! Hamessage.Builder
  }
  override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
    return Hamessage.Builder()
  }
  override public func classBuilder() -> ProtocolBuffersMessageBuilder {
    return Hamessage.Builder()
  }
  public func toBuilder() throws -> Hamessage.Builder {
    return try Hamessage.builderWithPrototype(prototype:self)
  }
  public class func builderWithPrototype(prototype:Hamessage) throws -> Hamessage.Builder {
    return try Hamessage.Builder().mergeFrom(other:prototype)
  }
  override public func encode() throws -> Dictionary<String,Any> {
    guard isInitialized() else {
      throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
    if hasEvent {
      jsonMap["event"] = event
    }
    if hasName {
      jsonMap["name"] = name
    }
    if hasProfileimage {
      jsonMap["profileimage"] = profileimage
    }
    if hasText {
      jsonMap["text"] = text
    }
    if hasEmail {
      jsonMap["email"] = email
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,Any>) throws -> Hamessage {
    return try Hamessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
  }
  override class public func fromJSON(data:Data) throws -> Hamessage {
    return try Hamessage.Builder.fromJSONToBuilder(data:data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasEvent {
      output += "\(indent) event: \(event) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasProfileimage {
      output += "\(indent) profileimage: \(profileimage) \n"
    }
    if hasText {
      output += "\(indent) text: \(text) \n"
    }
    if hasEmail {
      output += "\(indent) email: \(email) \n"
    }
    output += unknownFields.getDescription(indent: indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasEvent {
             hashCode = (hashCode &* 31) &+ event.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasProfileimage {
             hashCode = (hashCode &* 31) &+ profileimage.hashValue
          }
          if hasText {
             hashCode = (hashCode &* 31) &+ text.hashValue
          }
          if hasEmail {
             hashCode = (hashCode &* 31) &+ email.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Hamessage"
  }
  override public func className() -> String {
      return "Hamessage"
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    fileprivate var builderResult:Hamessage = Hamessage()
    public func getMessage() -> Hamessage {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasEvent:Bool {
         get {
              return builderResult.hasEvent
         }
    }
    public var event:String {
         get {
              return builderResult.event
         }
         set (value) {
             builderResult.hasEvent = true
             builderResult.event = value
         }
    }
    @discardableResult
    public func setEvent(_ value:String) -> Hamessage.Builder {
      self.event = value
      return self
    }
    @discardableResult
    public func clearEvent() -> Hamessage.Builder{
         builderResult.hasEvent = false
         builderResult.event = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    @discardableResult
    public func setName(_ value:String) -> Hamessage.Builder {
      self.name = value
      return self
    }
    @discardableResult
    public func clearName() -> Hamessage.Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasProfileimage:Bool {
         get {
              return builderResult.hasProfileimage
         }
    }
    public var profileimage:String {
         get {
              return builderResult.profileimage
         }
         set (value) {
             builderResult.hasProfileimage = true
             builderResult.profileimage = value
         }
    }
    @discardableResult
    public func setProfileimage(_ value:String) -> Hamessage.Builder {
      self.profileimage = value
      return self
    }
    @discardableResult
    public func clearProfileimage() -> Hamessage.Builder{
         builderResult.hasProfileimage = false
         builderResult.profileimage = ""
         return self
    }
    public var hasText:Bool {
         get {
              return builderResult.hasText
         }
    }
    public var text:String {
         get {
              return builderResult.text
         }
         set (value) {
             builderResult.hasText = true
             builderResult.text = value
         }
    }
    @discardableResult
    public func setText(_ value:String) -> Hamessage.Builder {
      self.text = value
      return self
    }
    @discardableResult
    public func clearText() -> Hamessage.Builder{
         builderResult.hasText = false
         builderResult.text = ""
         return self
    }
    public var hasEmail:Bool {
         get {
              return builderResult.hasEmail
         }
    }
    public var email:String {
         get {
              return builderResult.email
         }
         set (value) {
             builderResult.hasEmail = true
             builderResult.email = value
         }
    }
    @discardableResult
    public func setEmail(_ value:String) -> Hamessage.Builder {
      self.email = value
      return self
    }
    @discardableResult
    public func clearEmail() -> Hamessage.Builder{
         builderResult.hasEmail = false
         builderResult.email = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    @discardableResult
    override public func clear() -> Hamessage.Builder {
      builderResult = Hamessage()
      return self
    }
    override public func clone() throws -> Hamessage.Builder {
      return try Hamessage.builderWithPrototype(prototype:builderResult)
    }
    override public func build() throws -> Hamessage {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Hamessage {
      let returnMe:Hamessage = builderResult
      return returnMe
    }
    @discardableResult
    public func mergeFrom(other:Hamessage) throws -> Hamessage.Builder {
      if other == Hamessage() {
       return self
      }
      if other.hasEvent {
           event = other.event
      }
      if other.hasName {
           name = other.name
      }
      if other.hasProfileimage {
           profileimage = other.profileimage
      }
      if other.hasText {
           text = other.text
      }
      if other.hasEmail {
           email = other.email
      }
      try merge(unknownField: other.unknownFields)
      return self
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream) throws -> Hamessage.Builder {
         return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
    }
    @discardableResult
    override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Hamessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
      while (true) {
        let protobufTag = try codedInputStream.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10:
          event = try codedInputStream.readString()

        case 18:
          name = try codedInputStream.readString()

        case 26:
          profileimage = try codedInputStream.readString()

        case 34:
          text = try codedInputStream.readString()

        case 42:
          email = try codedInputStream.readString()

        default:
          if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    class public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> Hamessage.Builder {
      let resultDecodedBuilder = Hamessage.Builder()
      if let jsonValueEvent = jsonMap["event"] as? String {
        resultDecodedBuilder.event = jsonValueEvent
      }
      if let jsonValueName = jsonMap["name"] as? String {
        resultDecodedBuilder.name = jsonValueName
      }
      if let jsonValueProfileimage = jsonMap["profileimage"] as? String {
        resultDecodedBuilder.profileimage = jsonValueProfileimage
      }
      if let jsonValueText = jsonMap["text"] as? String {
        resultDecodedBuilder.text = jsonValueText
      }
      if let jsonValueEmail = jsonMap["email"] as? String {
        resultDecodedBuilder.email = jsonValueEmail
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:Data) throws -> Hamessage.Builder {
      let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
        throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
      }
      return try Hamessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
    }
  }

}

extension Hamessage: GeneratedMessageProtocol {
  public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<Hamessage> {
    var mergedArray = Array<Hamessage>()
    while let value = try parseDelimitedFrom(inputStream: inputStream) {
      mergedArray.append(value)
    }
    return mergedArray
  }
  public class func parseDelimitedFrom(inputStream: InputStream) throws -> Hamessage? {
    return try Hamessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
  }
  public class func parseFrom(data: Data) throws -> Hamessage {
    return try Hamessage.Builder().mergeFrom(data: data, extensionRegistry:HamessageRoot.default.extensionRegistry).build()
  }
  public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> Hamessage {
    return try Hamessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(inputStream: InputStream) throws -> Hamessage {
    return try Hamessage.Builder().mergeFrom(inputStream: inputStream).build()
  }
  public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> Hamessage {
    return try Hamessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream) throws -> Hamessage {
    return try Hamessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
  }
  public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Hamessage {
    return try Hamessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
  }
}

// @@protoc_insertion_point(global_scope)
